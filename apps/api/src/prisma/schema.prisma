// Este es tu archivo de esquema Prisma
// aprende más en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?  @db.VarChar(100)
  username  String?  @unique @db.VarChar(100)
  password  String   @db.Text
  avatar    String?  @db.Text
  bio       String?  @db.Text
  role      Role     @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prompts      Prompt[]
  reviews      Review[]
  comments     Comment[]
  favorites    Favorite[]
  likes        Like[]
  settings     UserSettings[]

  @@index([email])
  @@map("users")
}

model UserSettings {
  id                   String  @id @default(cuid())
  userId               String  @map("user_id") @unique
  language             String  @default("es")
  theme                String  @default("light") // light, dark, system
  notifyNewPrompts     Boolean @default(true)
  notifyNewComments    Boolean @default(true)
  notifyNewLikes       Boolean @default(true)
  notifyNewReviews     Boolean @default(true)
  notifyMarketingEmail Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_settings")
}

model Prompt {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  categoryId  String   @map("category_id")
  title       String   @db.VarChar(255)
  description String   @db.Text
  content     String   @db.Text
  llmId       String   @map("llm_id")
  published   Boolean  @default(false)
  views       Int      @default(0)
  example     String   @db.Text
  slug        String   @unique @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  reviews   Review[]
  comments  Comment[]
  favorites Favorite[]
  likes     Like[]
  tags      TagsOnPrompts[]

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  llm      Llm      @relation(fields: [llmId], references: [id])

  @@index([userId])
  @@index([categoryId])
  @@index([llmId])
  @@map("prompts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100)
  description String   @db.Text
  slug        String   @unique @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  prompts Prompt[]

  @@index([name])
  @@index([slug])
  @@map("categories")
}

model Llm {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100)
  description String   @db.Text
  icon        String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  prompts Prompt[]

  @@index([name])
  @@map("llms")
}

model Review {
  id        String   @id @default(cuid())
  promptId  String   @map("prompt_id")
  userId    String   @map("user_id")
  rating    Int      @db.SmallInt
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prompt Prompt @relation(fields: [promptId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  likes  Like[]

  @@index([promptId])
  @@index([userId])
  @@map("reviews")
}

model Comment {
  id        String   @id @default(cuid())
  promptId  String?  @map("prompt_id")
  userId    String   @map("user_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prompt Prompt? @relation(fields: [promptId], references: [id])
  user   User    @relation(fields: [userId], references: [id])
  likes  Like[]

  @@index([promptId])
  @@index([userId])
  @@map("comments")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(50)
  slug      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  prompts TagsOnPrompts[]

  @@index([name])
  @@index([slug])
  @@map("tags")
}

model TagsOnPrompts {
  promptId  String   @map("prompt_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  prompt Prompt @relation(fields: [promptId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([promptId, tagId])
  @@index([promptId])
  @@index([tagId])
  @@map("tags_on_prompts")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  promptId  String   @map("prompt_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  prompt Prompt @relation(fields: [promptId], references: [id])

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
  @@map("favorites")
}

model Like {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  promptId  String?  @map("prompt_id")
  reviewId  String?  @map("review_id")
  commentId String?  @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id])
  prompt  Prompt?  @relation(fields: [promptId], references: [id])
  review  Review?  @relation(fields: [reviewId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, promptId])
  @@unique([userId, reviewId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([promptId])
  @@index([reviewId])
  @@index([commentId])
  @@map("likes")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
